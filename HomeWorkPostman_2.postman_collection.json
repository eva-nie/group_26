{
	"info": {
		"_postman_id": "9657eead-156d-4eda-a65b-687a2570c790",
		"name": "HomeWorkPostman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"This is the first responce from server!\");",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json.",
							"var jsonData = pm.response.json();// 1st response parsing option",
							"",
							"//var jsonResp = JSON.parse(responseBody); //2nd response parsing option",
							"",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Check name\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"John\");",
							"});",
							"",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(jsonData.age).to.eql(\"30\");",
							"});",
							"",
							"var salary = parseInt(jsonData.salary);",
							"",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Check salary\", function () {",
							"    pm.expect(jsonData.salary).to.eql(1000);",
							"});",
							"",
							"//Спарсить request.",
							"var requestData = request.data;",
							"",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Compare name value\", function () {",
							"    pm.expect(jsonData.name).to.eql(requestData.name);",
							"});",
							"",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Compare age value\", function () {",
							"    pm.expect(jsonData.age).to.eql(requestData.age);",
							"});",
							"",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Compare salary value\", function () {",
							"    pm.expect(jsonData.age).to.eql(requestData.age);",
							"});",
							"",
							"//. Вывести в консоль параметр family из response.",
							"let resFamily = jsonData.family;",
							"console.log(resFamily);",
							"",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Compare salary 1_5_year value\", function () {",
							"   pm.expect(jsonData.family.u_salary_1_5_year).to.eql(requestData.salary * 4);",
							"});",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "name",
						"value": "John",
						"type": "default",
						"disabled": true
					},
					{
						"key": "age",
						"value": "30",
						"type": "default",
						"disabled": true
					},
					{
						"key": "salary",
						"value": "1000",
						"type": "default",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "John",
							"type": "default"
						},
						{
							"key": "age",
							"value": "30",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "John",
							"disabled": true
						},
						{
							"key": "age",
							"value": "30",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json",
							" var jsonData = pm.response.json();",
							" ",
							" //Спарсить request.",
							" var query = {};",
							" pm.request.url.query.all().forEach((param) => { ",
							"     query[param.key] = param.value",
							"     });",
							"",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check that name in response equals name in request\", function () {",
							"   pm.expect(jsonData.name).to.eql(query.name);",
							"});",
							"",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Check that age in response equals age in request\", function () {",
							"   pm.expect(jsonData.age).to.eql(query.age);",
							"});",
							"",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"var querySalary = parseInt(query.salary);",
							" ",
							"pm.test(\"Check that salary in response equals salary in request\", function () {",
							"    pm.expect(jsonData.salary).to.eql(querySalary);",
							"",
							"});",
							"",
							"//Вывести в консоль параметр family из response.",
							"var family = jsonData.family;",
							"console.log(family);",
							"",
							"////Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Check dog parameter has parameter name\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.haveOwnProperty(\"name\");",
							"   });",
							"",
							"//Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Check dog parameter has parameter age\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.haveOwnProperty(\"age\");",
							"   });",
							"",
							"//Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Check dog's name s Luky\", function () {",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"",
							"//Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Check dog's age is 4\", function () {",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "name",
						"value": "John",
						"type": "default",
						"disabled": true
					},
					{
						"key": "age",
						"value": "30",
						"type": "default",
						"disabled": true
					},
					{
						"key": "salary",
						"value": "1000",
						"type": "default",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{url}}/object_info_3?name=John&age=30&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "John"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json.",
							"var jsonData = JSON.parse(responseBody);",
							"//var jsonData = pm.response.json(); another option",
							"",
							"//Спарсить request.",
							" var query = {};",
							" pm.request.url.query.all().forEach((param) => { ",
							"     query[param.key] = param.value",
							"     });",
							"",
							"//var query = JSON.parse(pm.request.url.query.all())",
							"",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check name in response equals name in request\", function () {",
							"    pm.expect(jsonData.name).to.eql(query.name);",
							"});",
							"",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Check age in response equals age in request\", function () {",
							"    pm.expect(jsonData.age).to.eql(+query.age);",
							"});",
							"",
							"//Вывести в консоль параметр salary из request.",
							"console.log(query.salary);",
							"",
							"//Вывести в консоль параметр salary из response.",
							"console.log(jsonData.salary);",
							"",
							"//Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(jsonData.salary[0]);",
							"",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(jsonData.salary[1]);",
							"",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(jsonData.salary[2]);",
							"",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"0 element salary parameter in response is equal 0 element salary parameter in request\", function () {",
							"    pm.expect(jsonData.salary[0]).to.eql(+query.salary);",
							"});",
							"",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"1st element salary parameter in response is equal to 1st element * 2 salary parameter in request\", function () {",
							"    pm.expect(+jsonData.salary[1]).to.eql(query.salary * 2);",
							"});",
							"",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"2nd element salary parameter in response is equal to 2nd element * 3 salary parameter in request\", function () {",
							"    pm.expect(+jsonData.salary[2]).to.eql(query.salary * 3);",
							"});",
							"",
							"//Создать в окружении переменную name",
							"pm.environment.set(\"name\", \"John\");",
							"",
							"// Передать в окружение переменную age",
							"pm.environment.set(\"age\", 30);",
							"",
							"//Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", 1000);",
							"",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"const salary = [1000, \"2000\", \"3000\"];",
							"for(let i = 0; i < salary.length; i++){",
							"  console.log(salary[i]);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "name",
						"value": "John",
						"type": "default",
						"disabled": true
					},
					{
						"key": "age",
						"value": "30",
						"type": "default",
						"disabled": true
					},
					{
						"key": "salary",
						"value": "1000",
						"type": "default",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json",
							"var jsonData = pm.response.json()",
							"",
							"//Спарсить request.",
							"var requestData = request.data;",
							"",
							"//Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Check json response has parameter 'start_qa_salary' \", function () {",
							"    pm.expect(jsonData).to.haveOwnProperty(\"start_qa_salary\");",
							"   });",
							"",
							"   //Проверить, что json response имеет параметр qa_salary_after_6_months",
							"   pm.test(\"Check json response has parameter 'qa_salary_after_6_months' \", function () {",
							"    pm.expect(jsonData).to.haveOwnProperty(\"qa_salary_after_6_months\");",
							"   });",
							"",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Check json response has parameter 'qa_salary_after_12_months' \", function () {",
							"    pm.expect(jsonData).to.haveOwnProperty(\"qa_salary_after_12_months\");",
							"   });",
							"",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"",
							"pm.test(\"Check json response has parameter 'qa_salary_after_1.5_year' \", function () {",
							"    pm.expect(jsonData).to.haveOwnProperty(\"qa_salary_after_1.5_year\");",
							"   });",
							"",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Check json response has parameter 'qa_salary_after_3.5_years' \", function () {",
							"    pm.expect(jsonData).to.haveOwnProperty(\"qa_salary_after_3.5_years\");",
							"   });",
							"",
							"//Проверить, что json response имеет параметр person",
							"pm.test(\"Check that json response has parameter 'person' \", function () {",
							"    pm.expect(jsonData).to.haveOwnProperty(\"person\");",
							"   });",
							"",
							"   //Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Check that parameter 'start_qa_salary' equals to parameter 'salary' from request\", function () {",
							"    pm.expect(jsonData.start_qa_salary).to.be.eql(+requestData.salary);",
							"   });",
							"   ",
							"   //Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Check that parameter 'qa_salary_after_6_months' equals to parameter 'salary*2' from request\", function () {",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.be.eql(+requestData.salary * 2);",
							"   });",
							"",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"",
							"pm.test(\"Check that parameter 'qa_salary_after_12_months' equals to parameter 'salary*2.7' from request\", function () {",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.be.eql(+requestData.salary * 2.7);",
							"   });",
							"",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Check that parameter 'qa_salary_after_1.5_year' equals to parameter 'salary*3.3' from request\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.be.eql(+requestData.salary * 3.3);",
							"   });",
							"",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"Check that parameter 'qa_salary_after_3.5_years' equals to parameter 'salary*3.3' from request\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.be.eql(+requestData.salary * 3.8);",
							"   });",
							"",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Check that parameter 'person.u_name[1]' equals to parameter 'salary' from request\", function () {",
							"    pm.expect(jsonData.person.u_name[1]).to.be.eql(+requestData.salary);",
							"   });",
							"",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Check that parameter 'u_age' equals to parameter 'age' from request\", function () {",
							"    pm.expect(jsonData.person.u_age).to.be.eql(+requestData.age);",
							"   });",
							"",
							"   //Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"   pm.test(\"Check that parameter 'u_salary_5_years' equals to parameter 'salary*4.2' from request\", function () {",
							"    pm.expect(jsonData.person.u_salary_5_years).to.be.eql(+requestData.salary*4.2);",
							"   });",
							"   ",
							"   //***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"   const arr = jsonData.person;",
							"   for(let i = 0; i < arr.length; i++){",
							"   }",
							"     console.log(arr);",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "name",
						"value": "John",
						"type": "default",
						"disabled": true
					},
					{
						"key": "age",
						"value": "30",
						"type": "default",
						"disabled": true
					},
					{
						"key": "salary",
						"value": "1000",
						"type": "default",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}